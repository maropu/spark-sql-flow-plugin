/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.flow.sink

import java.io.File
import java.sql.Timestamp
import java.time.format.DateTimeFormatter
import java.util.TimeZone

import scala.collection.mutable

import org.apache.commons.io.FileUtils

import org.apache.spark.internal.Logging
import org.apache.spark.sql._
import org.apache.spark.sql.catalyst.util._
import org.apache.spark.sql.flow.{BaseGraphBatchSink, BaseGraphStreamSink, GraphNodeType, SQLFlowGraphEdge, SQLFlowGraphNode}

object GraphFileWriter {
  def writeTo(dirPath: String, filename: String, graphString: String, overwrite: Boolean): File = {
    val outputDir = new File(dirPath)
    if (overwrite) {
      FileUtils.deleteDirectory(outputDir)
    }
    if (!outputDir.mkdir()) {
      throw new AnalysisException(if (overwrite) {
        s"`overwrite` is set to true, but could not remove output dir path '$dirPath'"
      } else {
        s"Output dir path '$dirPath' already exists"
      })
    }
    stringToFile(new File(outputDir, filename), graphString)
  }
}

trait BaseGraphFormat {
  def toGraphString(nodes: Seq[SQLFlowGraphNode], edges: Seq[SQLFlowGraphEdge]): String
}

abstract class GraphFileBatchSink extends BaseGraphBatchSink with BaseGraphFormat {
  def filenameSuffix: String

  protected def getFilenamePrefixFrom(options: Map[String, String]): String = {
    options.getOrElse("filenamePrefix", "sqlflow")
  }

  protected def getOutputDirPathFrom(options: Map[String, String]): String = {
    options.getOrElse("outputDirPath", {
      throw new AnalysisException("`outputDirPath` not specified")
    })
  }

  protected def getOverwriteFrom(options: Map[String, String]): Boolean = {
    options.getOrElse("overwrite", "false").toBoolean
  }

  override def write(
      nodes: Seq[SQLFlowGraphNode],
      edges: Seq[SQLFlowGraphEdge],
      options: Map[String, String]): Unit = {
    val dirPath = getOutputDirPathFrom(options)
    val filenamePrefix = getFilenamePrefixFrom(options)
    val overwrite = getOverwriteFrom(options)
    GraphFileWriter.writeTo(
      dirPath,
      s"$filenamePrefix.$filenameSuffix",
      toGraphString(nodes, edges),
      overwrite)
  }
}

case class GraphVizSink(imgFormat: String = "svg")
    extends GraphFileBatchSink with BaseGraphStreamSink {

  override val filenameSuffix: String = "dot"

  private val cachedNodeColor = "lightblue"

  private val className = {
    this.getClass.getCanonicalName.replace("$", "")
  }

  override def toGraphString(nodes: Seq[SQLFlowGraphNode], edges: Seq[SQLFlowGraphEdge]): String = {
    if (nodes.nonEmpty) {
      val nodeStrings = nodes.map(generateNodeString)
      val edgeStrings = edges.map(generateEdgeString)
      s"""
         |// Automatically generated by $className
         |digraph {
         |  graph [pad="0.5" nodesep="0.5" ranksep="1" fontname="Helvetica" rankdir=LR];
         |  node [shape=plaintext]
         |
         |  ${nodeStrings.sorted.mkString("\n")}
         |  ${edgeStrings.sorted.mkString("\n")}
         |}
       """.stripMargin
    } else {
      ""
    }
  }

  private def generateNodeString(node: SQLFlowGraphNode): String = {
    node.tpe match {
      case GraphNodeType.TableNode | GraphNodeType.ViewNode | GraphNodeType.QueryNode =>
        generateTableNodeString(node)
      case GraphNodeType.PlanNode | GraphNodeType.LeafPlanNode =>
        generatePlanNodeString(node)
    }
  }

  private def generateEdgeString(edge: SQLFlowGraphEdge): String = {
    val toIdxStr = (i: Option[Int]) => i.map(_.toString).getOrElse("nodeName")
    s""""${edge.fromId}":${toIdxStr(edge.fromIdx)} -> "${edge.toId}":${toIdxStr(edge.toIdx)};"""
  }

  private def generateTableNodeString(node: SQLFlowGraphNode): String = {
    val nodeColor = if (node.isCached) cachedNodeColor else "black"
    val outputAttrs = node.attributeNames.zipWithIndex.map { case (attr, i) =>
      s"""<tr><td port="$i">${normalizeForHtml(attr)}</td></tr>"""
    }
    // scalastyle:off line.size.limit
    s"""
       |"${node.uniqueId}" [color="$nodeColor" label=<
       |<table>
       |  <tr><td bgcolor="$nodeColor" port="nodeName"><i><font color="white">${node.ident}</font></i></td></tr>
       |  ${outputAttrs.mkString("\n")}
       |</table>>];
     """.stripMargin
    // scalastyle:on line.size.limit
  }

  private def generatePlanNodeString(node: SQLFlowGraphNode): String = {
    val nodeColor = if (node.isCached) cachedNodeColor else "lightgray"
    val outputAttrs = node.attributeNames.zipWithIndex.map { case (attr, i) =>
      s"""<tr><td port="$i">${normalizeForHtml(attr)}</td></tr>"""
    }
    // scalastyle:off line.size.limit
    s"""
       |"${node.uniqueId}" [label=<
       |<table color="$nodeColor" border="1" cellborder="0" cellspacing="0">
       |  <tr><td bgcolor="$nodeColor" port="nodeName"><i>${node.ident}</i></td></tr>
       |  ${outputAttrs.mkString("\n")}
       |</table>>];
     """.stripMargin
    // scalastyle:on line.size.limit
  }

  private def normalizeForHtml(str: String): String = {
    str.replaceAll("&", "&amp;")
      .replaceAll("<", "&lt;")
      .replaceAll(">", "&gt;")
  }

  private def tryGenerateImageFile(options: Map[String, String]): Unit = {
    val dirPath = getOutputDirPathFrom(options)
    val filenamePrefix = getFilenamePrefixFrom(options)
    val dotFile = new File(dirPath, s"$filenamePrefix.$filenameSuffix").getAbsolutePath
    val dstFile = new File(dirPath, s"$filenamePrefix.$imgFormat").getAbsolutePath
    val arguments = s"-T$imgFormat $dotFile > $dstFile"
    SinkUtils.tryToExecuteCommand("dot", arguments)
  }

  override def write(
      nodes: Seq[SQLFlowGraphNode],
      edges: Seq[SQLFlowGraphEdge],
      options: Map[String, String]): Unit = {
    super.write(nodes, edges, options)
    tryGenerateImageFile(options)
  }

  private def getCurrentDateTime(): String = {
    val curTimestamp = new Timestamp(System.currentTimeMillis())
    val zoneId = TimeZone.getTimeZone( "UTC" ).toZoneId
    val formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS")
    curTimestamp.toLocalDateTime.atZone(zoneId).format(formatter)
  }

  override def append(
      nodes: Seq[SQLFlowGraphNode],
      edges: Seq[SQLFlowGraphEdge],
      options: Map[String, String]): Unit = {
    val rootOutputDir = new File(getOutputDirPathFrom(options))
    if (!rootOutputDir.exists() && !rootOutputDir.mkdir()) {
      throw new AnalysisException("Failed to make root output dir " +
        s"'${rootOutputDir.getAbsolutePath}'")
    }
    val outputDir = new File(rootOutputDir, getCurrentDateTime())
    val writeOptions = {
      val opts = mutable.Map[String, String]()
      opts ++= options
      opts("outputDirPath") = outputDir.getAbsolutePath
      opts.toMap
    }
    super.write(nodes, edges, writeOptions)
    tryGenerateImageFile(writeOptions)
  }
}

object AdjacencyListSink extends Logging {
  def apply(sep: String): AdjacencyListSink = {
    if (sep.length > 1) {
      logWarning(s"Length of the specified separator string is greater than 1: $sep")
    }
    AdjacencyListSink(sep.toCharArray.head)
  }
}

case class AdjacencyListSink(sep: Char = ',') extends GraphFileBatchSink {
  override val filenameSuffix: String = "lst"

  override def toGraphString(nodes: Seq[SQLFlowGraphNode], edges: Seq[SQLFlowGraphEdge]): String = {
    val edgeListSet = edges.map { e => (e.fromId, e.toId) }.toSet
    edgeListSet.map { case (from, to) =>
      s"$from$sep$to"
    }.mkString("\n")
  }
}